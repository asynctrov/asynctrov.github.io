<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker安装Mysql和Redis</title>
    <link href="/2020/09/26/Docker/"/>
    <url>/2020/09/26/Docker/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h3><ul><li><h5 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h5></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">sudo</span> <span class="hljs-string">yum remove docker \</span><br>                  <span class="hljs-meta">docker-client</span> <span class="hljs-string">\</span><br>                  <span class="hljs-meta">docker-client-latest</span> <span class="hljs-string">\</span><br>                  <span class="hljs-meta">docker-common</span> <span class="hljs-string">\</span><br>                  <span class="hljs-meta">docker-latest</span> <span class="hljs-string">\</span><br>                  <span class="hljs-meta">docker-latest-logrotate</span> <span class="hljs-string">\</span><br>                  <span class="hljs-meta">docker-logrotate</span> <span class="hljs-string">\</span><br>                  <span class="hljs-attr">docker-engine</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="使用-Docker-仓库进行安装"><a href="#使用-Docker-仓库进行安装" class="headerlink" title="使用 Docker 仓库进行安装"></a>使用 Docker 仓库进行安装</h5></li></ul><h5 id="1-检查linux内核版本必须高于3-1"><a href="#1-检查linux内核版本必须高于3-1" class="headerlink" title="1.检查linux内核版本必须高于3.1"></a>1.检查linux内核版本必须高于3.1</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">uname -r <span class="hljs-regexp">//</span>检查内核版本<br>yum update <span class="hljs-regexp">//</span>更新yum包<br></code></pre></td></tr></table></figure><h5 id="2-安装docker"><a href="#2-安装docker" class="headerlink" title="2.安装docker"></a>2.安装docker</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> docker<br></code></pre></td></tr></table></figure><h5 id="3-启动docker"><a href="#3-启动docker" class="headerlink" title="3.启动docker"></a>3.启动docker</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">systemctl</span> <span class="hljs-string">start docker</span><br><span class="hljs-attr">docker</span> <span class="hljs-string">-v</span><br></code></pre></td></tr></table></figure><h5 id="4-设置开机启动docker"><a href="#4-设置开机启动docker" class="headerlink" title="4.设置开机启动docker"></a>4.设置开机启动docker</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-builtin-name">enable</span> docker<br></code></pre></td></tr></table></figure><h5 id="5-停止docker"><a href="#5-停止docker" class="headerlink" title="5.停止docker"></a>5.停止docker</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl <span class="hljs-built_in">stop</span> docker<br></code></pre></td></tr></table></figure><h5 id="6-搜索资源"><a href="#6-搜索资源" class="headerlink" title="6.搜索资源"></a>6.搜索资源</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search mysql</span><br></code></pre></td></tr></table></figure><h5 id="7-下载镜像"><a href="#7-下载镜像" class="headerlink" title="7.下载镜像"></a>7.下载镜像</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull mysql</span> <br></code></pre></td></tr></table></figure><h6 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a><strong>设置仓库</strong></h6><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">sudo</span> <span class="hljs-string">yum install -y yum-utils \</span><br>  <span class="hljs-meta">device-mapper-persistent-data</span> <span class="hljs-string">\</span><br>  <span class="hljs-attr">lvm2</span><br></code></pre></td></tr></table></figure><p> 使用以下命令来设置稳定的仓库。 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo yum-config-manager \<br>    --add-repo \<br>    https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></td></tr></table></figure><ul><li><h5 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h5><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本： </p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><ul><li><h5 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h5></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure><ul><li><h5 id="查看Docker版本"><a href="#查看Docker版本" class="headerlink" title="查看Docker版本"></a>查看Docker版本</h5></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker -v</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="查看有无下载Docker镜像"><a href="#查看有无下载Docker镜像" class="headerlink" title="查看有无下载Docker镜像"></a>查看有无下载Docker镜像</h5></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="设置Docker开机启动"><a href="#设置Docker开机启动" class="headerlink" title="设置Docker开机启动"></a>设置Docker开机启动</h5></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-builtin-name">enable</span> docker<br></code></pre></td></tr></table></figure><ul><li><h5 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h5></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mkdir -p <span class="hljs-regexp">/etc/</span>docker;<br>sudo tee <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://stmuunbo.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF;<br>sudo systemctl daemon-reload;<br>sudo systemctl restart docker;<br></code></pre></td></tr></table></figure><ul><li><h5 id="下载mysql镜像"><a href="#下载mysql镜像" class="headerlink" title="下载mysql镜像"></a>下载mysql镜像</h5></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="启动mysql镜像"><a href="#启动mysql镜像" class="headerlink" title="启动mysql镜像"></a>启动mysql镜像</h5></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> --name mysql \<br>-v <span class="hljs-regexp">/mydata/my</span>sql<span class="hljs-regexp">/log:/</span>var<span class="hljs-regexp">/log/my</span>sql \<br>-v <span class="hljs-regexp">/mydata/my</span>sql<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/lib/my</span>sql \<br>-v <span class="hljs-regexp">/mydata/my</span>sql<span class="hljs-regexp">/conf:/</span>etc/mysql \<br>-e MYSQL_ROOT_PASSWORD=root \<br>-d mysql:<span class="hljs-number">5.7</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="查看运行中的Docker镜像"><a href="#查看运行中的Docker镜像" class="headerlink" title="查看运行中的Docker镜像"></a>查看运行中的Docker镜像</h5></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="修改mysql字符集"><a href="#修改mysql字符集" class="headerlink" title="修改mysql字符集"></a>修改mysql字符集</h5></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">[client]<br>default-character-<span class="hljs-keyword">set</span>=utf8<br> <br>[mysql]<br><span class="hljs-keyword">default</span>-<span class="hljs-built_in">character</span>-<span class="hljs-keyword">set</span>=utf8<br> <br>[mysqld]<br>init_connect=<span class="hljs-string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br>init_connect=<span class="hljs-string">&#x27;SET NAMES utf8&#x27;</span><br><span class="hljs-built_in">character</span>-<span class="hljs-keyword">set</span>-<span class="hljs-keyword">server</span>=utf8<br><span class="hljs-keyword">collation</span>-<span class="hljs-keyword">server</span>=utf8_unicode_ci<br><span class="hljs-keyword">skip</span>-<span class="hljs-built_in">character</span>-<span class="hljs-keyword">set</span>-<span class="hljs-keyword">client</span>-handshake<br><span class="hljs-keyword">skip</span>-<span class="hljs-keyword">name</span>-resolve<br></code></pre></td></tr></table></figure><ul><li><h5 id="进入Docker镜像中的mysql"><a href="#进入Docker镜像中的mysql" class="headerlink" title="进入Docker镜像中的mysql"></a>进入Docker镜像中的mysql</h5></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it mysql <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><ul><li><h5 id="下载redis"><a href="#下载redis" class="headerlink" title="下载redis"></a>下载redis</h5></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull redis</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="运行redis"><a href="#运行redis" class="headerlink" title="运行redis"></a>运行redis</h5></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/mydata/</span>redis/conf<br>touch <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/conf/</span>redis.conf<br><br><br><br><br>docker run -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> --name redis \<br>-v <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/data:/</span>data \<br>-v <span class="hljs-regexp">/mydata/</span>redis<span class="hljs-regexp">/conf/</span>redis.conf:<span class="hljs-regexp">/etc/</span>redis/redis.conf \<br>-d redis redis-server <span class="hljs-regexp">/etc/</span>redis/redis.conf<br></code></pre></td></tr></table></figure><ul><li><h5 id="添加redis持久化"><a href="#添加redis持久化" class="headerlink" title="添加redis持久化"></a>添加redis持久化</h5></li></ul><p>在redis.conf中添加以下代码</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">appendonly</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="自启动redis"><a href="#自启动redis" class="headerlink" title="自启动redis"></a>自启动redis</h5></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">docker <span class="hljs-keyword">update</span> redis <span class="hljs-comment">--restart=always</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2020/05/06/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/05/06/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-查看当前程序并强制关闭进程"><a href="#1-查看当前程序并强制关闭进程" class="headerlink" title="1.查看当前程序并强制关闭进程"></a>1.查看当前程序并强制关闭进程</h4><p><code>ps -ef|grep 【程序名】</code></p><p><code>kill -9 【进程号】</code></p><p><code>【netstat  -anp  |grep 6379 】查询端口是否被占用</code></p><p><code>【ps aux】该命令用于查看当前所有运行的进程</code></p><h4 id="2-修改系统是时间"><a href="#2-修改系统是时间" class="headerlink" title="2.修改系统是时间"></a>2.修改系统是时间</h4><p><code>date</code>   查看本地时间</p><p><code>hwclock --show</code>   查看硬件时间</p><p><code>hwclock --set --date &#39;2016-01-08  15:15:15&#39;</code>  设置硬件时间</p><p><code>hwclock --hctosys</code>   设置系统时间与硬件时间同步</p><p><code>clock -w</code>   保存时钟</p><p><code>init 6  (reboot)</code>   重启</p><h4 id="3-切换用户"><a href="#3-切换用户" class="headerlink" title="3.切换用户"></a>3.切换用户</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">su</span> <span class="hljs-string">- oracle</span><br><span class="hljs-comment">#查询oracle详细的端口信息</span><br> <span class="hljs-attr">lsnrctl</span> <span class="hljs-string">status </span><br><br></code></pre></td></tr></table></figure><h4 id="4-系统防火墙"><a href="#4-系统防火墙" class="headerlink" title="4.系统防火墙"></a>4.系统防火墙</h4><p><code>systemctl stop firewalld</code>关闭系统防火墙</p><p><code>systemctl status firewalld</code> 查看防火墙状态</p><h4 id="5-解压war包"><a href="#5-解压war包" class="headerlink" title="5.解压war包"></a>5.解压war包</h4><p><code>unzip -oq common.war -d common</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx的使用</title>
    <link href="/2020/05/06/Nginx/"/>
    <url>/2020/05/06/Nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx基本概念"><a href="#Nginx基本概念" class="headerlink" title="Nginx基本概念"></a>Nginx基本概念</h2><h3 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h3><h4 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h4><ul><li><h5 id="Nginx是一个高性能的HTTP和反向代理服务器，特点是暂用内存少，并发能力强，事实上Nginx的并发能力确实在同类型的网页服务器中表现良好。"><a href="#Nginx是一个高性能的HTTP和反向代理服务器，特点是暂用内存少，并发能力强，事实上Nginx的并发能力确实在同类型的网页服务器中表现良好。" class="headerlink" title="Nginx是一个高性能的HTTP和反向代理服务器，特点是暂用内存少，并发能力强，事实上Nginx的并发能力确实在同类型的网页服务器中表现良好。"></a>Nginx是一个高性能的HTTP和反向代理服务器，特点是暂用内存少，并发能力强，事实上Nginx的并发能力确实在同类型的网页服务器中表现良好。</h5></li><li><h5 id="Nginx专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验。有报告表明能支持高达5000个并发连接。"><a href="#Nginx专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验。有报告表明能支持高达5000个并发连接。" class="headerlink" title="Nginx专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验。有报告表明能支持高达5000个并发连接。"></a>Nginx专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验。有报告表明能支持高达5000个并发连接。</h5></li></ul><h4 id="1-反向代理"><a href="#1-反向代理" class="headerlink" title="1. 反向代理"></a>1. 反向代理</h4><h5 id="正向代理"><a href="#正向代理" class="headerlink" title="- 正向代理"></a>- 正向代理</h5><h6 id="在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问"><a href="#在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问" class="headerlink" title="在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问"></a>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问</h6><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="- 反向代理"></a>- 反向代理</h5><h6 id="我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器，隐藏了真实服务器IP地址。"><a href="#我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器，隐藏了真实服务器IP地址。" class="headerlink" title="我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器，隐藏了真实服务器IP地址。"></a>我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器，隐藏了真实服务器IP地址。</h6><h4 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2. 负载均衡"></a>2. 负载均衡</h4><h6 id="单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器的情况转为将请求分发到多个服务器上，将负载分发到不同的服务器。"><a href="#单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器的情况转为将请求分发到多个服务器上，将负载分发到不同的服务器。" class="headerlink" title="单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器的情况转为将请求分发到多个服务器上，将负载分发到不同的服务器。"></a>单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器的情况转为将请求分发到多个服务器上，将负载分发到不同的服务器。</h6><h4 id="3-动静分离"><a href="#3-动静分离" class="headerlink" title="3. 动静分离"></a>3. 动静分离</h4><h6 id="为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。"><a href="#为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。" class="headerlink" title="为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。"></a>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</h6><h4 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h4><h4 id="Nginx操作的常用命令"><a href="#Nginx操作的常用命令" class="headerlink" title="Nginx操作的常用命令"></a>Nginx操作的常用命令</h4><h5 id="使用nginx操作命令的前提条件需要进入nginx的目录"><a href="#使用nginx操作命令的前提条件需要进入nginx的目录" class="headerlink" title="使用nginx操作命令的前提条件需要进入nginx的目录"></a>使用nginx操作命令的前提条件需要进入nginx的目录</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br></code></pre></td></tr></table></figure><h5 id="查看nginx的版本号"><a href="#查看nginx的版本号" class="headerlink" title="查看nginx的版本号"></a>查看nginx的版本号</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./nginx</span> -v<br></code></pre></td></tr></table></figure><h5 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./nginx</span><br></code></pre></td></tr></table></figure><h5 id="关闭Nginx"><a href="#关闭Nginx" class="headerlink" title="关闭Nginx"></a>关闭Nginx</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">./nginx -s <span class="hljs-built_in">stop</span><br></code></pre></td></tr></table></figure><h5 id="重新加载Nginx-重新载入Nginx配置文件"><a href="#重新加载Nginx-重新载入Nginx配置文件" class="headerlink" title="重新加载Nginx(重新载入Nginx配置文件)"></a>重新加载Nginx(重新载入Nginx配置文件)</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span><br></code></pre></td></tr></table></figure><h5 id="重新启动Nginx"><a href="#重新启动Nginx" class="headerlink" title="重新启动Nginx"></a>重新启动Nginx</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./nginx</span> -s reopen <br></code></pre></td></tr></table></figure><h5 id="指定位置配置文件启动Nginx"><a href="#指定位置配置文件启动Nginx" class="headerlink" title="指定位置配置文件启动Nginx"></a>指定位置配置文件启动Nginx</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/nginx -c /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br></code></pre></td></tr></table></figure><h4 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h4><h5 id="Nginx配置文件位置"><a href="#Nginx配置文件位置" class="headerlink" title="Nginx配置文件位置"></a>Nginx配置文件位置</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br></code></pre></td></tr></table></figure><h5 id="Nginx配置文件组成"><a href="#Nginx配置文件组成" class="headerlink" title="Nginx配置文件组成"></a>Nginx配置文件组成</h5><ol><li><p>Nginx配置文件有三部分组成</p><ul><li><p>第一部分  全局块</p><p>​    从配置文件开始到events块之间的内容，主要会设置一些影响Nginx服务器整体运行的配置指令，主要包括配置运行Ngiunx服务器的用户（组）、允许生成的worker process数，进程PID存放路径、日志存放路径和类型以及配置文件的引入等。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#user  nobody;</span><br>worker_processes  <span class="hljs-number">1</span>;<br><br><span class="hljs-meta">#error_log  logs/error.log;</span><br><span class="hljs-meta">#error_log  logs/error.log  notice;</span><br><span class="hljs-meta">#error_log  logs/error.log  info;</span><br><br><span class="hljs-meta">#pid        logs/nginx.pid;</span><br></code></pre></td></tr></table></figure><p>  worker_processes  1;<br>   这是Nginx服务器并发处理服务的关键配置，worker processes值越大，可以支持的并发处理量越多，但是会收到硬件、软件等设备的制约。</p></li></ul></li></ol><ul><li><p>第二部分  events块</p><p>  ​    events块涉及的指令只要影响Nginx服务器与用户的网络连接     </p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<span class="hljs-comment">#最大连接数</span><br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>第三部分 http块</p><p>​    </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">81</span>;<span class="hljs-comment">#监听的端口</span><br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<span class="hljs-comment">#配置真实服务器地址</span><br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br><br>        <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    root           html;</span><br>        <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>        <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>        <span class="hljs-comment">#    include        fastcgi_params;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>        <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ /\.ht &#123;</span><br>        <span class="hljs-comment">#    deny  all;</span><br>        <span class="hljs-comment">#&#125;</span><br>    &#125;<br><br>    <span class="hljs-comment"># another virtual host using mix of IP-, name-, and port-based configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       8000;</span><br>    <span class="hljs-comment">#    listen       somename:8080;</span><br>    <span class="hljs-comment">#    server_name  somename  alias  another.alias;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br><br>    <span class="hljs-comment"># HTTPS server</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       443 ssl;</span><br>    <span class="hljs-comment">#    server_name  localhost;</span><br><br>    <span class="hljs-comment">#    ssl_certificate      cert.pem;</span><br>    <span class="hljs-comment">#    ssl_certificate_key  cert.key;</span><br><br>    <span class="hljs-comment">#    ssl_session_cache    shared:SSL:1m;</span><br>    <span class="hljs-comment">#    ssl_session_timeout  5m;</span><br><br>    <span class="hljs-comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br>    <span class="hljs-comment">#    ssl_prefer_server_ciphers  on;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>这是Nginx服务器哦诶之中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p><p>http块包括http全局块和server块</p><ol><li><p>http全局块</p><p>​    http全局块配置的指令包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求上限等。</p></li><li><p>server块</p><p>​    这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</p><p>​    每个http块可以包括多个server块，而每个server块就相当于一个虚拟主机。</p><p>​    而每个server块也分为全局server块，以及可以同时包含多个location块。</p><ol><li><p>全局server块</p><p>最常见的配置就是本虚拟机主机的监听配置和本虚拟主机的名称和ip配置</p><p>#多个相同端口的server根据 server_name匹配ip</p></li><li><p>location块    </p><p>一个server块可以包括多个location块    </p><p>这块的主要作用是基于Nginx服务器接受到的请求字符串（例如：server_name/uri-string）。对虚拟主机名称（也可以是ip别名）之外的字符串（例如：前面的、uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p></li></ol></li></ol></li></ul><h4 id="Nginx配置实例-反向代理"><a href="#Nginx配置实例-反向代理" class="headerlink" title="Nginx配置实例-反向代理"></a>Nginx配置实例-反向代理</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>       <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<span class="hljs-comment">#监听的端口</span><br>       <span class="hljs-attribute">server_name</span>  localhost;<br><br>       <span class="hljs-comment">#charset koi8-r;</span><br><br>       <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>       <span class="hljs-attribute">location</span> / &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>           <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<span class="hljs-comment">#配置真实服务器地址</span><br>           <span class="hljs-attribute">index</span>  index.html index.htm;<br>       &#125;<br>       &#125;<br>       <br></code></pre></td></tr></table></figure><p>配置对外暴露80端口，代理<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>       <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<span class="hljs-comment">#监听的端口</span><br>       <span class="hljs-attribute">server_name</span>  localhost;<br><br>       <span class="hljs-comment">#charset koi8-r;</span><br><br>       <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>       <span class="hljs-attribute">location</span> /b/ &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>           <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<span class="hljs-comment">#配置真实服务器地址</span><br>           <span class="hljs-attribute">index</span>  index.html index.htm;<br>       &#125;<br>       <br>        <span class="hljs-attribute">location</span> /a/ &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>           <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8081;<span class="hljs-comment">#配置真实服务器地址</span><br>           <span class="hljs-attribute">index</span>  index.html index.htm;<br>       &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>相同的端口根据不同的路径访问不同的项目  a和b两个路径都要真实存在或者是项目映射的路径。否则404</p><h4 id="Nginx实现负载均衡"><a href="#Nginx实现负载均衡" class="headerlink" title="Nginx实现负载均衡"></a>Nginx实现负载均衡</h4><p><strong>1.默认使用的是轮询的方式</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">http&#123;<br>......<br>upstream myserver &#123;<br><br>        server <span class="hljs-number">47.98</span><span class="hljs-number">.125</span><span class="hljs-number">.87</span>:<span class="hljs-number">8081</span>;<br>        server <span class="hljs-number">47.98</span><span class="hljs-number">.125</span><span class="hljs-number">.87</span>:<span class="hljs-number">8080</span>;<br>&#125;<br><br>    sercer&#123;<br>location /&#123;<br>......<br> proxy_pass http:<span class="hljs-comment">//myserver;</span><br> proxy_connect_timeout <span class="hljs-number">10</span>;<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.使用权重的方式weight</strong></p><p>​    weight代表权重，默认为1，权重越高被分配的客户端越多。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">upstream myserver &#123;<br><br>       <span class="hljs-built_in"> server </span>47.98.125.87:8081 <span class="hljs-attribute">weight</span>=10;<br>       <span class="hljs-built_in"> server </span>47.98.125.87:8080 <span class="hljs-attribute">weight</span>=10;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.ip_hash</strong></p><p>​    每个请求按访问ip的hash结果分配，这样每个访客<strong>固定访问一个后端服务器</strong>，可以解决session的问题</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">upstream myserver &#123;<br>ip_hash;<br>       <span class="hljs-built_in"> server </span>47.98.125.87:8081;<br>       <span class="hljs-built_in"> server </span>47.98.125.87:8080;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.fair(第三方)</strong></p><p>​    按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">upstream myserver &#123;<br>       <span class="hljs-built_in"> server </span>47.98.125.87:8081;<br>       <span class="hljs-built_in"> server </span>47.98.125.87:8080;<br>        fair;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>location区段</strong></p><p>通过指定模式来与客户端请求的URI相匹配，基本语法如下：<strong>location [=|<del>|</del>*|^~|@] pattern{……}</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、没有修饰符 表示：必须以指定模式开始<br><span class="hljs-number">2</span>、=表示：必须与指定的模式精确匹配<br><span class="hljs-number">3</span>、~ 表示：指定的正则表达式要区分大小写<br><span class="hljs-number">4</span>、~* 表示：指定的正则表达式不区分大小写<br><span class="hljs-number">5</span>、^~ 类似于无修饰符的行为，也是以指定模式开始，不同的是，如果模式匹配，<br>那么就停止搜索其他模式了。<br><span class="hljs-number">6</span>、@ ：定义命名location区段，这些区段客户段不能访问，只可以由内部产生的请<br>求来访问，如try_files或error_page等<br><br></code></pre></td></tr></table></figure><h4 id="Nginx配置实例-动静分离"><a href="#Nginx配置实例-动静分离" class="headerlink" title="Nginx配置实例-动静分离"></a>Nginx配置实例-动静分离</h4><p>​    把动态跟静态请求分开，可以理解成Nginx处理静态页面，Tomcat处理动态页面。</p><p>​    可以通过Nginx的location配置动态请求走Tomcat，静态页面直接走Nginx。</p><p>​    从而减少服务器请求，减少数据库连接</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">location <span class="hljs-regexp">/images/</span> &#123;<br>           root   <span class="hljs-regexp">/static/</span>;#真实路径为localhost<span class="hljs-regexp">/static/im</span>ages/<br>           autoindex on;#开启可以直接访问到<span class="hljs-regexp">/static/im</span>ages/下的所有文件<br>       &#125;<br><br></code></pre></td></tr></table></figure><h4 id="其他的一些配置"><a href="#其他的一些配置" class="headerlink" title="其他的一些配置"></a>其他的一些配置</h4><ul><li><p>​    设置文件上传最大容量</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">client_max_body_size    <span class="hljs-number">30</span>m<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx配置SSl证书开启HTTPS访问</title>
    <link href="/2020/05/06/Nginx%E9%85%8D%E7%BD%AESSl%E8%AF%81%E4%B9%A6%E5%BC%80%E5%90%AFHTTPS%E8%AE%BF%E9%97%AE/"/>
    <url>/2020/05/06/Nginx%E9%85%8D%E7%BD%AESSl%E8%AF%81%E4%B9%A6%E5%BC%80%E5%90%AFHTTPS%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p> Nginx如果未开启SSL模块，配置Https时提示错误。</p><pre><code> nginx: [emerg] the &quot;ssl&quot; parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:xxx</code></pre><ol><li><p>进入Nginx资源包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /app/download/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>configure 并开启ssl模块</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx --with-http_stub_status_module --with-http_ssl_module<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>make（ 不需要执行make install，否则就覆盖安装了。 ）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>备份原有的Nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx_bak<br></code></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>先停止Nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s stop<br></code></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>将重新编译好的nginx文件覆盖原来的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp .<span class="hljs-regexp">/objs/</span>nginx <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/<br></code></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>查看安装情况</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -V<br></code></pre></td></tr></table></figure></li></ol><ol start="8"><li><p>配置nginx配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>       <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span> ssl;<br>       <span class="hljs-attribute">server_name</span>  localhost;<br>   <br>       <span class="hljs-attribute">ssl_certificate</span>      ../cert/<span class="hljs-regexp">*.pem</span>;<br>       <span class="hljs-attribute">ssl_certificate_key</span>  ../cert/<span class="hljs-regexp">*.key</span>;<br>   <br>       <span class="hljs-attribute">ssl_session_cache</span>    shared:SSL:<span class="hljs-number">1m</span>;<br>       <span class="hljs-attribute">ssl_session_timeout</span>  <span class="hljs-number">5m</span>;<br>   <br>       <span class="hljs-attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;<br>       <span class="hljs-attribute">ssl_prefer_server_ciphers</span>  <span class="hljs-literal">on</span>;<br>   <br>       <span class="hljs-attribute">location</span> / &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>           <span class="hljs-attribute">index</span>  index.html index.htm;<br>       &#125;<br><span class="hljs-attribute">location</span> / &#123;<br>           <span class="hljs-attribute">proxy_pass</span>  http://127.0.0.1:9100;<br>           <span class="hljs-comment">#Proxy Settings</span><br>           <span class="hljs-attribute">proxy_redirect</span>     <span class="hljs-literal">off</span>;<br>           <span class="hljs-attribute">proxy_set_header</span>   Host             <span class="hljs-variable">$host</span>;<br>           <span class="hljs-attribute">proxy_set_header</span>   X-Real-IP        <span class="hljs-variable">$remote_addr</span>;<br>           <span class="hljs-attribute">proxy_set_header</span>   X-Forwarded-For  <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>           <span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;<br>           <span class="hljs-attribute">proxy_max_temp_file_size</span> <span class="hljs-number">0</span>;<br>           <span class="hljs-attribute">proxy_connect_timeout</span>      <span class="hljs-number">90</span>;<br>           <span class="hljs-attribute">proxy_send_timeout</span>         <span class="hljs-number">90</span>;<br>           <span class="hljs-attribute">proxy_read_timeout</span>         <span class="hljs-number">90</span>;<br>           <span class="hljs-attribute">proxy_buffer_size</span>          <span class="hljs-number">4k</span>;<br>           <span class="hljs-attribute">proxy_buffers</span>              <span class="hljs-number">4</span> <span class="hljs-number">32k</span>;<br>           <span class="hljs-attribute">proxy_busy_buffers_size</span>    <span class="hljs-number">64k</span>;<br>           <span class="hljs-attribute">proxy_temp_file_write_size</span> <span class="hljs-number">64k</span>;<br>      &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>重启nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reload<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle数据库常用语句</title>
    <link href="/2020/05/06/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/"/>
    <url>/2020/05/06/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="查询所登录用户的sid"><a href="#查询所登录用户的sid" class="headerlink" title="查询所登录用户的sid"></a>查询所登录用户的sid</h4><p><code>select instance_name from v$instance; </code></p><h4 id="查询当前登录用户所在的表空间"><a href="#查询当前登录用户所在的表空间" class="headerlink" title="查询当前登录用户所在的表空间"></a>查询当前登录用户所在的表空间</h4><p><code>select username,default_tablespace from dba_users  where username=&#39;登录的用户名(大写)&#39;</code></p><h4 id="查询所有表空间"><a href="#查询所有表空间" class="headerlink" title="查询所有表空间"></a>查询所有表空间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Select</span> a.Tablespace_Name,<br>       <span class="hljs-keyword">Round</span>(<span class="hljs-keyword">Sum</span>(Dbsize) / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span>, <span class="hljs-number">2</span>) <span class="hljs-string">&quot;dbszie(G)&quot;</span>,<br>       <span class="hljs-keyword">Round</span>(<span class="hljs-keyword">Sum</span>(Fsize) / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span>, <span class="hljs-number">2</span>) <span class="hljs-string">&quot;fszie(G)&quot;</span>,<br>       <span class="hljs-keyword">Round</span>((<span class="hljs-keyword">Sum</span>(Dbsize) - <span class="hljs-keyword">Sum</span>(Fsize)) / <span class="hljs-keyword">Sum</span>(Dbsize), <span class="hljs-number">4</span>) * <span class="hljs-number">100</span> <span class="hljs-string">&quot;利用率&quot;</span>,<br>       <span class="hljs-keyword">Round</span>(<span class="hljs-keyword">Sum</span>(Fsize) / <span class="hljs-keyword">Sum</span>(Dbsize), <span class="hljs-number">4</span>) * <span class="hljs-number">100</span> <span class="hljs-string">&quot;空闲率&quot;</span><br>  <span class="hljs-keyword">From</span> (<span class="hljs-keyword">Select</span> Tablespace_Name, <span class="hljs-keyword">Sum</span>(<span class="hljs-keyword">Bytes</span>) Dbsize<br>          <span class="hljs-keyword">From</span> Dba_Data_Files<br>         <span class="hljs-keyword">Group</span> <span class="hljs-keyword">By</span> Tablespace_Name) a,<br>       (<span class="hljs-keyword">Select</span> Tablespace_Name, <span class="hljs-keyword">Sum</span>(<span class="hljs-keyword">Bytes</span>) Fsize<br>          <span class="hljs-keyword">From</span> Dba_Free_Space<br>         <span class="hljs-keyword">Group</span> <span class="hljs-keyword">By</span> Tablespace_Name) b<br> <span class="hljs-keyword">Where</span> a.Tablespace_Name = b.Tablespace_Name(+)<br> <span class="hljs-keyword">Group</span> <span class="hljs-keyword">By</span> a.Tablespace_Name;<br><br></code></pre></td></tr></table></figure><h5 id="创建sequence"><a href="#创建sequence" class="headerlink" title="创建sequence"></a>创建sequence</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">sequence</span> YBAQ02_SEQNO<br><span class="hljs-keyword">minvalue</span> <span class="hljs-number">1</span><br>maxvalue <span class="hljs-number">999999999999999999999999999</span><br><span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">increment</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">cache</span> <span class="hljs-number">20</span>;<br><br></code></pre></td></tr></table></figure><h4 id="查看导致锁表的sql语句是那一条"><a href="#查看导致锁表的sql语句是那一条" class="headerlink" title="查看导致锁表的sql语句是那一条"></a>查看导致锁表的sql语句是那一条</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> l.session_id <span class="hljs-keyword">sid</span>, <br>s.serial<span class="hljs-comment">#, </span><br>l.locked_mode, <br>l.oracle_username, <br>s.user<span class="hljs-comment">#, </span><br>l.os_user_name, <br>s.machine, <br>s.terminal, <br>a.sql_text, <br>a.action <br><span class="hljs-keyword">from</span> v$sqlarea a, v$<span class="hljs-keyword">session</span> s, v$locked_object l <br><span class="hljs-keyword">where</span> l.session_id = s.sid <br><span class="hljs-keyword">and</span> s.prev_sql_addr = a.address <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span>, s.serial<span class="hljs-comment">#;</span><br><br></code></pre></td></tr></table></figure><h4 id="杀掉锁表进程："><a href="#杀掉锁表进程：" class="headerlink" title="杀掉锁表进程："></a>杀掉锁表进程：</h4><h5 id="–通过上面的查询获取SID和serial-，替换下面的x-y-就可以解除被锁的状态"><a href="#–通过上面的查询获取SID和serial-，替换下面的x-y-就可以解除被锁的状态" class="headerlink" title="–通过上面的查询获取SID和serial#，替换下面的x,y,就可以解除被锁的状态"></a>–通过上面的查询获取SID和serial#，替换下面的x,y,就可以解除被锁的状态</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">alter<span class="hljs-built_in"> system </span>kill session <span class="hljs-string">&#x27;x,y&#x27;</span>;<br><br></code></pre></td></tr></table></figure><h3 id="查询表空间存放路径"><a href="#查询表空间存放路径" class="headerlink" title="查询表空间存放路径"></a>查询表空间存放路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plsql">select upper(dd.tablespace_name) &quot;表空间名&quot;,dd.file_name &quot;表空间路径&quot;, round(sum(dd.bytes)&#x2F;(1024*1024),2) &quot;表空间大小(M)&quot;<br>        from sys.dba_data_files dd<br>        group by dd.tablespace_name,dd.file_name;<br></code></pre></td></tr></table></figure><h3 id="添加表空间"><a href="#添加表空间" class="headerlink" title="添加表空间"></a>添加表空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plsql">alter tablespace 表空间名(jxpyc) add datafile &#39;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;oradata&#x2F;hznet&#x2F;res16.dbf&#39; size 4096m;<br></code></pre></td></tr></table></figure><h3 id="查看表空间利用率"><a href="#查看表空间利用率" class="headerlink" title="查看表空间利用率"></a>查看表空间利用率</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plsql">Select a.Tablespace_Name,<br>       Round(Sum(Dbsize) &#x2F; 1024 &#x2F; 1024 &#x2F; 1024, 2) &quot;dbszie(G)&quot;,<br>       Round(Sum(Fsize) &#x2F; 1024 &#x2F; 1024 &#x2F; 1024, 2) &quot;fszie(G)&quot;,<br>       Round((Sum(Dbsize) - Sum(Fsize)) &#x2F; Sum(Dbsize), 4) * 100 &quot;利用率&quot;,<br>       Round(Sum(Fsize) &#x2F; Sum(Dbsize), 4) * 100 &quot;空闲率&quot;<br>  From (Select Tablespace_Name, Sum(Bytes) Dbsize<br>          From Dba_Data_Files<br>         Group By Tablespace_Name) a,<br>       (Select Tablespace_Name, Sum(Bytes) Fsize<br>          From Dba_Free_Space<br>         Group By Tablespace_Name) b<br> Where a.Tablespace_Name &#x3D; b.Tablespace_Name(+)<br> Group By a.Tablespace_Name;<br></code></pre></td></tr></table></figure><h3 id="查询表空间"><a href="#查询表空间" class="headerlink" title="查询表空间"></a>查询表空间</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">SELECT<br>upper( dd.tablespace_name ) <span class="hljs-string">&quot;表空间名&quot;</span>,<br>dd.file_name <span class="hljs-string">&quot;表空间路径&quot;</span>,<br>round( sum( dd.bytes ) / ( 1024 * 1024 ), 2 ) <span class="hljs-string">&quot;表空间大小(M)&quot;</span> <br><span class="hljs-keyword">FROM</span><br>sys.dba_data_files dd <br>GROUP BY<br>dd.tablespace_name,<br>dd.file_name;<br></code></pre></td></tr></table></figure><h3 id="查询表空间-1"><a href="#查询表空间-1" class="headerlink" title="查询表空间"></a>查询表空间</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select<br>       b.file_name 物理文件名,<br>       b.tablespace_name 表空间,<br>       b.bytes/1024/1024大小M,<br>      (b.bytes-sum(nvl(a.bytes,0)))/1024/1024  已使用M,<br>      substr((b.bytes-sum(nvl(a.bytes,0)))/(b.bytes)<span class="hljs-number">*100</span>,1,5)  利用率<br><span class="hljs-keyword">from</span> dba_free_space a,dba_data_files b<br>where a.<span class="hljs-attribute">file_id</span>=b.file_id <br>group by b.tablespace_name,b.file_name,b.bytes<br>order by b.tablespace_name;<br></code></pre></td></tr></table></figure><h3 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">tablespace</span> zlbApp <br><span class="hljs-keyword">logging</span><br><span class="hljs-keyword">datafile</span> <span class="hljs-string">&#x27;D:\ORACLECLIENT\APP\ADMIN\ORADATA\ORCL\ZLBAPP01.DBF&#x27;</span><br><span class="hljs-keyword">size</span> <span class="hljs-number">2048</span>m <br><span class="hljs-keyword">autoextend</span> <span class="hljs-keyword">on</span>                           <br><span class="hljs-keyword">next</span> <span class="hljs-number">512</span>m <span class="hljs-keyword">maxsize</span> <span class="hljs-number">10240</span>m 　　　<br><span class="hljs-keyword">extent</span> <span class="hljs-keyword">management</span> <span class="hljs-keyword">local</span>;　<br></code></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">create<span class="hljs-built_in"> user </span> isp_scms<br> identified by  isp_scms<br>default tablespace ZLBAPP;<br></code></pre></td></tr></table></figure><h3 id="赋予用户dba权限"><a href="#赋予用户dba权限" class="headerlink" title="赋予用户dba权限"></a>赋予用户dba权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">connect</span>,<span class="hljs-keyword">resource</span>,dba <span class="hljs-keyword">to</span> isp_scms;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="/2019/05/06/Hexo/"/>
    <url>/2019/05/06/Hexo/</url>
    
    <content type="html"><![CDATA[<h4 id="使用hexo搭建个人博客"><a href="#使用hexo搭建个人博客" class="headerlink" title="使用hexo搭建个人博客"></a>使用hexo搭建个人博客</h4><p><img src="/img/timg.jpg" alt="hexo init文件目录"></br></p><h5 id="1-安装-git"><a href="#1-安装-git" class="headerlink" title="1.安装 git"></a>1.安装 <a href="https://git-scm.com/downloads">git</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git --version   //安装完之后使用cmd命令查看是否安装成功<br></code></pre></td></tr></table></figure><h5 id="2-安装-node-js"><a href="#2-安装-node-js" class="headerlink" title="2.安装 node.js"></a>2.安装 <a href="https://nodejs.org/en/">node.js</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node --version//安装完之后使用cmd命令查看是否安装成功<br></code></pre></td></tr></table></figure><h5 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo//注:-g表示全局安装<br></code></pre></td></tr></table></figure><h5 id="4-初始化hexo"><a href="#4-初始化hexo" class="headerlink" title="4.初始化hexo"></a>4.初始化hexo</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> <br></code></pre></td></tr></table></figure><p><img src="/assets/hexoinit.jpg" alt="hexo init文件目录"></br></p><h5 id="5-生成hexo静态页面"><a href="#5-生成hexo静态页面" class="headerlink" title="5. 生成hexo静态页面"></a>5. 生成hexo静态页面</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p><img src="/assets/hexolist.jpg" alt="hexo init文件目录"></br></p><h5 id="6-运行hexo"><a href="#6-运行hexo" class="headerlink" title="6.运行hexo"></a>6.运行hexo</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><h5 id="7-创建新页面"><a href="#7-创建新页面" class="headerlink" title="7.创建新页面"></a>7.创建新页面</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page pagename<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java知识回顾</title>
    <link href="/2019/05/06/Java01/"/>
    <url>/2019/05/06/Java01/</url>
    
    <content type="html"><![CDATA[<h4 id="Java是什么？"><a href="#Java是什么？" class="headerlink" title="Java是什么？####"></a>Java是什么？####</h4><p><a href="https://baike.baidu.com/item/Java/85979">Java</a>是一门<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象</a>编程语言，不仅吸收了<a href="https://baike.baidu.com/item/C%2B%2B">C++</a>语言的各种优点，还摒弃了C++里难以理解的<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BB%A7%E6%89%BF">多继承</a>、<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304">指针</a>等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程  。<br></br></br><br>Java具有简单性、面向对象、<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232">分布式</a>、<a href="https://baike.baidu.com/item/%E5%81%A5%E5%A3%AE%E6%80%A7/4430133">健壮性</a>、<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E6%80%A7/7664678">安全性</a>、平台独立与可移植性、<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404">多线程</a>、动态性等特点  。Java可以编写<a href="https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/2331979">桌面应用程序</a>、<a href="https://baike.baidu.com/item/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">Web应用程序</a>、<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336">分布式系统</a>和<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/186978">嵌入式系统</a>应用程序等</p><h4 id="JDK与JRE"><a href="#JDK与JRE" class="headerlink" title="JDK与JRE"></a>JDK与JRE</h4><ul><li><p>JRE(Java Runtime Environment)：Java运行环境，为Java的运行提供了环境.</p></li><li><p>JDK(Java Devolopment Kit)：Java开发工具包，提供了Java的开发环境与运行环境。</p><p>注:JDK包含了JRE也包含编译Java源码的Javac以及很多Java程序调试和分析的工具。如果只运行Java程序的话，只需要安装JRE就行了，要编写Java程序就需要安装JDK。</p></li></ul><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ol><li>整数类型</br><code>byte;short;int;long</code></li><li>浮点类型</br><code>float;double</code></li><li>字符类型</br><code>char</code></li><li>布尔类型</br><code>boolean</code></li></ol><h4 id="和equals"><a href="#和equals" class="headerlink" title="==和equals"></a>==和equals</h4><p>对于基本类型和引用类型==的作用效果是不一样的</p><ul><li>基本类型：比较的是值是否相同。</li><li>引用类型：比较的是引用是否相同。</li></ul><p>equals本质上就是==，只不过String和Integer等重写了equals方法，把它变成了值比较。</p><pre><code>- String a = &quot;string&quot;;- String b = &quot;string&quot;;- String c = new String(&quot;string&quot;);- Sytem.out.println(a==b);//true- Sytem.out.println(a==c);//false- Sytem.out.println(a.equals(b));//true- Sytem.out.println(a.equals(c));//true</code></pre><h4 id="final在Java中的作用"><a href="#final在Java中的作用" class="headerlink" title="final在Java中的作用"></a>final在Java中的作用</h4><ul><li>final修饰的类叫最终类，该类不能被继承。final不能修饰抽象类</li><li>final修饰的方法不能被重写。</li><li>final修饰的变量叫做常量，常量必须初始化，初始化之后不能被修改。</li></ul><h4 id="操作字符串的类"><a href="#操作字符串的类" class="headerlink" title="操作字符串的类"></a>操作字符串的类</h4><ul><li><p><code>String</code></p></li><li><p><code>StringBuffer</code></p></li><li><p><code>StringBuilder</code></p><p>  区别在于String声明的是不可变的对象，每次操作都会生产新的String对象，然后将指针指向新的String对象，而StringBuffer、StringBuilder可以在原有的基础上进行操作，所以经常改变字符串内容的情况下最好不使用String</br></br>StringBuffer和StringBuilder最大的区别在于，StringBuffer是线程安全的，StringBuilder是非线程安全的，但StringBuilder的性能却高于StringBuffer的，所以单线程下推荐使用StringBuilder，多线程下使用StringBuffer。</p></li></ul><h4 id="String类的常用方法"><a href="#String类的常用方法" class="headerlink" title="String类的常用方法"></a>String类的常用方法</h4><pre><code>- indexof();返回指定字符的索引- charAt();返回指定索引处的字符- replace();字符串替换- trim();去除字符串两端的空白- spilt();分割字符串，返回一个分割后的字符串数组- getBytes();返回字符串的byte类型数组- length();返回字符串长度- toLowerCase();将字符串转成小写字符- toUpperCase();将字符串转成大写字符- substring();截取字符串- equals();字符串比较</code></pre><h4 id="普通类和抽象类"><a href="#普通类和抽象类" class="headerlink" title="普通类和抽象类"></a>普通类和抽象类</h4><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法</li><li>抽象类不能直接实例化，普通类可以直接实例化</li></ul><h4 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h4><ul><li>实现：抽象类的子类使用extends继承，接口必须使用implements实现</li><li>构造函数：抽象类可以有构造函数，接口不能有</li><li>实现数量：类可以实现很多个接口，但是只能继承一个抽象类</li><li>访问修饰符：接口中的默认方法是public修饰，抽象类中的方法可以使任意访问修饰符</li></ul><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><ul><li>按功能来分：输入流（input） 、输出流（output）</li><li>按类型来分：字节流和字符流</li><li>字符流和字节流的区别是字节流按8位传输以字节位单位输入输出数据，字符流按16位传输以字符为单位输入输出数据</li></ul><h4 id="BIO、BIO、AIO"><a href="#BIO、BIO、AIO" class="headerlink" title="BIO、BIO、AIO"></a>BIO、BIO、AIO</h4><ul><li>BIO：Block IO 同步阻塞式IO，就是平常使用的传统IO，他的特点是模式简单使用方便，并发处理能力低</li><li>NIO：New IO同步非阻塞式IO，是传统IO的升级，客户端和服务端通过Channel（通道）通讯，实现了多路复用</li><li>AIO：Asynchronous IO是NIO的升级，也叫NIO2，实现了异步非阻塞式IO，异步IO的操作基于事件和回调机制</li></ul><h4 id="Files的常用方法"><a href="#Files的常用方法" class="headerlink" title="Files的常用方法"></a>Files的常用方法</h4><pre><code>- Files.exists();检测文件路径是否存在- Files.createFile();创建文件- Files.createDirectory();创建文件夹- Files.delete();删除一个文件或者目录- Files.copy();复制文件- Files.move();移动文件- Files.size();查看文件个数- Files.read();读取文件- Files.write();写入文件</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用dos命令</title>
    <link href="/2019/05/06/s1/"/>
    <url>/2019/05/06/s1/</url>
    
    <content type="html"><![CDATA[<h5 id="常用dos命令"><a href="#常用dos命令" class="headerlink" title="常用dos命令"></a>常用dos命令</h5><pre><code>d: 去往D盘cd.. 返回上一级目录cd 文件名 目录切换到该文件名（子目录）下cd \ 直接回根目录dir 当前根目录下的文件目录dir /s 所有目录dir/p 目录多的时候，p用来分屏，显示完一屏后停下来dir/w 所有文件一屏内显示，只显示文件和子目录dir *.bat 显示所有扩展名是bat的文件,*代表任意字符。*为通配符，可代表多个字符，在分隔符前起作用dir a* 显示所有文件名是a的文件，*代表任意字符dir a? 显示所有文件名是以a开头，并只有2个字母，？代表任意字符。?为通配符，只能代表1个字符，在分隔符前起作用dir /ta 显示目录的文件上次访问时间 accessdir /tc 显示目录的文件创建时间 creatmd 文件名 创建目录-make directoryrd 文件名 移除目录-remove directory 移除的目录中不能有子目录和文件，不能删除当前目录copy con 1.txt 建立文件名为1的txt文档 建立后直接跳到文档内容，ctrl+z完成内容编辑del 1.txt 删除文件名为1的txt文档 del仅用于文档，rd用于文件ren 文件名 新文件名 重命名type 1.txt 显示文件1.txt的内容 一般只适用于txttree 显示文件目录树，含最底层目录echo 显示此命令后的字符echo off 在此语句后所有运行的命令都不显示命令行本身pause 暂停Ctrl+C 中断操作 比如运行tree很长的时候鼠标右键-标注 可选中文本鼠标操作-粘贴 可粘贴文本F7 查看之前执行的命令 MAC下的win系统，需要加Fnhelp 指令帮助cls 清除屏幕ver 查看系统版本date 查看日期time 查看时间ipconfig 查看电脑和网络地址ipconfig /all 显示所有网络适配器的完整TCP/IP配置信息winver 查看windows系统版本notepad 打开记事本程序mspaint 打开画图程序calc 打开计算机程序mstsc 远程桌面连接-Microsoft Terminal Server Connectionregedit 注册表编辑器devmgmt 设备管理器程序-device managementtaskmgr 任务管理器-task managertasklist 显示计算机进程appwiz.cpl 添加/删除程序-application wizardncpa.cpl 网络连接属性-network control panel appletfirewall.cpl 防火墙control 打开控制面板Tab键 补全文件名</code></pre><p>​            </p><p>　　    </p>]]></content>
    
    
    <categories>
      
      <category>dos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
